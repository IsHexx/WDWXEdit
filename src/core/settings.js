/*
 * Copyright (c) 2024-2025 IsHexx
 * All rights reserved.
 *
 * This software is proprietary and confidential. No part of this software
 * may be reproduced, distributed, or transmitted in any form or by any means,
 * including photocopying, recording, or other electronic or mechanical methods,
 * without the prior written permission of the author, except in the case of
 * brief quotations embodied in critical reviews and certain other noncommercial
 * uses permitted by copyright law.
 *
 * For permission requests, contact: IsHexx
 */
// Claude Code Update: 移除wxKeyInfo导入，不再需要注册码验证
export class WxSettings {
    constructor() {
        this.isLoaded = false;
        this.enableEmptyLine = false;
        // Claude Code Update: 更新默认值为石墨黑、16px、非衬线
        this.fontFamily = 'sans-serif';
        this.fontSize = '16px';
        this.primaryColor = '#2d3748';
        this.customCSS = '';
        // Claude Code ADD: 新增图片处理相关设置
        this.imageQuality = 0.9;
        this.imageMaxWidth = 1200;
        this.autoCompressImage = true;
        // Claude Code ADD: 新增排版相关设置
        this.paragraphSpacing = '正常';
        this.firstLineIndent = false;
        this.headingAlign = 'left';
        // Claude Code ADD: 新增导出相关设置
        this.defaultExportFormat = 'copy';
        this.autoSaveDraft = false;
        // Claude Code ADD: 新增公众号相关设置
        this.defaultWxAccount = '';
        // Claude Code ADD: 新增预览相关设置
        this.previewWidth = 800;
        this.previewDelay = 500;
        this.defaultStyle = 'obsidian-light';
        this.defaultHighlight = '默认';
        this.showStyleUI = true;
        this.linkStyle = 'inline';
        this.embedStyle = 'content';
        this.lineNumber = true;
        this.useCustomCss = false;
        // Claude Code Remove: 移除authKey初始化
        this.wxInfo = [];
        this.math = 'latex';
        this.baseCSS = '';
        this.watermark = '';
        this.useFigcaption = false;
        this.customCSSNote = '';
        this.enableEmptyLine = false;
        // Claude Code Update: 初始化样式编辑器属性为新默认值
        this.fontFamily = 'sans-serif';
        this.fontSize = '16px';
        this.primaryColor = '#2d3748';
        this.customCSS = '';
        // Claude Code ADD: 初始化新增设置
        this.imageQuality = 0.9;
        this.imageMaxWidth = 1200;
        this.autoCompressImage = true;
        this.paragraphSpacing = '正常';
        this.firstLineIndent = false;
        this.headingAlign = 'left';
        this.defaultExportFormat = 'copy';
        this.autoSaveDraft = false;
        this.defaultWxAccount = '';
        this.previewWidth = 800;
        this.previewDelay = 500;
    }
    // 静态方法，用于获取实例
    static getInstance() {
        if (!WxSettings.instance) {
            WxSettings.instance = new WxSettings();
        }
        return WxSettings.instance;
    }
    resetStyelAndHighlight() {
        this.defaultStyle = 'obsidian-light';
        this.defaultHighlight = '默认';
    }
    static loadSettings(data) {
        if (!data) {
            return;
        }
        // Claude Code Update: 移除authKey解构，添加新设置属性
        const { defaultStyle, linkStyle, embedStyle, showStyleUI, lineNumber, defaultHighlight, wxInfo, math, useCustomCss, baseCSS, watermark, useFigcaption, customCSSNote, ignoreEmptyLine, fontFamily, fontSize, primaryColor, customCSS, imageQuality, imageMaxWidth, autoCompressImage, paragraphSpacing, firstLineIndent, headingAlign, defaultExportFormat, autoSaveDraft, defaultWxAccount, previewWidth, previewDelay, } = data;
        const settings = WxSettings.getInstance();
        if (defaultStyle) {
            settings.defaultStyle = defaultStyle;
        }
        if (defaultHighlight) {
            settings.defaultHighlight = defaultHighlight;
        }
        if (showStyleUI !== undefined) {
            settings.showStyleUI = showStyleUI;
        }
        if (linkStyle) {
            settings.linkStyle = linkStyle;
        }
        if (embedStyle) {
            settings.embedStyle = embedStyle;
        }
        if (lineNumber !== undefined) {
            settings.lineNumber = lineNumber;
        }
        // Claude Code Remove: 移除authKey加载逻辑
        if (wxInfo) {
            settings.wxInfo = wxInfo;
        }
        if (math) {
            settings.math = math;
        }
        if (useCustomCss !== undefined) {
            settings.useCustomCss = useCustomCss;
        }
        if (baseCSS) {
            settings.baseCSS = baseCSS;
        }
        if (watermark) {
            settings.watermark = watermark;
        }
        if (useFigcaption !== undefined) {
            settings.useFigcaption = useFigcaption;
        }
        if (customCSSNote) {
            settings.customCSSNote = customCSSNote;
        }
        if (ignoreEmptyLine !== undefined) {
            settings.enableEmptyLine = ignoreEmptyLine;
        }
        // Claude Code ADD: 加载新设置属性
        if (fontFamily) {
            settings.fontFamily = fontFamily;
        }
        if (fontSize) {
            settings.fontSize = fontSize;
        }
        if (primaryColor) {
            settings.primaryColor = primaryColor;
        }
        if (customCSS) {
            settings.customCSS = customCSS;
        }
        if (imageQuality !== undefined) {
            settings.imageQuality = imageQuality;
        }
        if (imageMaxWidth !== undefined) {
            settings.imageMaxWidth = imageMaxWidth;
        }
        if (autoCompressImage !== undefined) {
            settings.autoCompressImage = autoCompressImage;
        }
        if (paragraphSpacing) {
            settings.paragraphSpacing = paragraphSpacing;
        }
        if (firstLineIndent !== undefined) {
            settings.firstLineIndent = firstLineIndent;
        }
        if (headingAlign) {
            settings.headingAlign = headingAlign;
        }
        if (defaultExportFormat) {
            settings.defaultExportFormat = defaultExportFormat;
        }
        if (autoSaveDraft !== undefined) {
            settings.autoSaveDraft = autoSaveDraft;
        }
        if (defaultWxAccount) {
            settings.defaultWxAccount = defaultWxAccount;
        }
        if (previewWidth !== undefined) {
            settings.previewWidth = previewWidth;
        }
        if (previewDelay !== undefined) {
            settings.previewDelay = previewDelay;
        }
        // Claude Code Remove: 移除getExpiredDate()调用
        settings.isLoaded = true;
    }
    // Claude Code Update: 移除authKey导出，添加新设置属性导出
    static allSettings() {
        const settings = WxSettings.getInstance();
        return {
            'defaultStyle': settings.defaultStyle,
            'defaultHighlight': settings.defaultHighlight,
            'showStyleUI': settings.showStyleUI,
            'linkStyle': settings.linkStyle,
            'embedStyle': settings.embedStyle,
            'lineNumber': settings.lineNumber,
            'wxInfo': settings.wxInfo,
            'math': settings.math,
            'useCustomCss': settings.useCustomCss,
            'baseCSS': settings.baseCSS,
            'watermark': settings.watermark,
            'useFigcaption': settings.useFigcaption,
            'customCSSNote': settings.customCSSNote,
            'ignoreEmptyLine': settings.enableEmptyLine,
            'fontFamily': settings.fontFamily,
            'fontSize': settings.fontSize,
            'primaryColor': settings.primaryColor,
            'customCSS': settings.customCSS,
            'imageQuality': settings.imageQuality,
            'imageMaxWidth': settings.imageMaxWidth,
            'autoCompressImage': settings.autoCompressImage,
            'paragraphSpacing': settings.paragraphSpacing,
            'firstLineIndent': settings.firstLineIndent,
            'headingAlign': settings.headingAlign,
            'defaultExportFormat': settings.defaultExportFormat,
            'autoSaveDraft': settings.autoSaveDraft,
            'defaultWxAccount': settings.defaultWxAccount,
            'previewWidth': settings.previewWidth,
            'previewDelay': settings.previewDelay,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,