/*
 * Copyright (c) 2024-2025 IsHexx
 * All rights reserved.
 *
 * This software is proprietary and confidential. No part of this software
 * may be reproduced, distributed, or transmitted in any form or by any means,
 * including photocopying, recording, or other electronic or mechanical methods,
 * without the prior written permission of the author, except in the case of
 * brief quotations embodied in critical reviews and certain other noncommercial
 * uses permitted by copyright law.
 *
 * For permission requests, contact: IsHexx
 */
// 导出主要类型和组件
export { PreviewView as WxPreview, VIEW_TYPE_WX_PREVIEW } from './ui/views/preview-view';
export { PreviewController } from './ui/controllers/preview-controller';
export { PreviewToolbar } from './ui/components/preview-toolbar';
export { PreviewContent } from './ui/components/preview-content';
export { PreviewStatus } from './ui/components/preview-status';
import { PreviewView } from './ui/views/preview-view';
/**
 * @deprecated 请使用新的模块化组件：PreviewView, PreviewController 等
 * 此类保留是为了向后兼容，但建议迁移到新架构
 */
// Claude Code Update
export class WxPreviewLegacy extends PreviewView {
    constructor(leaf, plugin) {
        super(leaf, plugin);
    }
    // 保持原有的公共API
    async batchPost(folder) {
        return this.getController().batchPost(folder);
    }
    // 其他原有方法的代理...
    get currentAppId() {
        return this.getController().getCurrentAppId();
    }
    get currentFile() {
        return this.getController().getCurrentFile();
    }
    get settings() {
        return this.getController().getSettings();
    }
    get assetsManager() {
        return this.getController().getAssetsManager();
    }
}
// 默认导出新的PreviewView
export default PreviewView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3gtcHJldmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInd4LXByZXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBRUgsWUFBWTtBQUNaLE9BQU8sRUFBRSxXQUFXLElBQUksU0FBUyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFJL0QsT0FBTyxFQUFFLFdBQVcsRUFBd0IsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RTs7O0dBR0c7QUFDSCxxQkFBcUI7QUFDckIsTUFBTSxPQUFPLGVBQWdCLFNBQVEsV0FBVztJQUM1QyxZQUFZLElBQW1CLEVBQUUsTUFBYztRQUMzQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxhQUFhO0lBQ2IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFlO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsZUFBZTtJQUNmLElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBRUQsb0JBQW9CO0FBQ3BCLGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAyNC0yMDI1IElzSGV4eFxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWwuIE5vIHBhcnQgb2YgdGhpcyBzb2Z0d2FyZVxuICogbWF5IGJlIHJlcHJvZHVjZWQsIGRpc3RyaWJ1dGVkLCBvciB0cmFuc21pdHRlZCBpbiBhbnkgZm9ybSBvciBieSBhbnkgbWVhbnMsXG4gKiBpbmNsdWRpbmcgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyIGVsZWN0cm9uaWMgb3IgbWVjaGFuaWNhbCBtZXRob2RzLFxuICogd2l0aG91dCB0aGUgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIG9mIHRoZSBhdXRob3IsIGV4Y2VwdCBpbiB0aGUgY2FzZSBvZlxuICogYnJpZWYgcXVvdGF0aW9ucyBlbWJvZGllZCBpbiBjcml0aWNhbCByZXZpZXdzIGFuZCBjZXJ0YWluIG90aGVyIG5vbmNvbW1lcmNpYWxcbiAqIHVzZXMgcGVybWl0dGVkIGJ5IGNvcHlyaWdodCBsYXcuXG4gKlxuICogRm9yIHBlcm1pc3Npb24gcmVxdWVzdHMsIGNvbnRhY3Q6IElzSGV4eFxuICovXG5cbi8vIOWvvOWHuuS4u+imgeexu+Wei+WSjOe7hOS7tlxuZXhwb3J0IHsgUHJldmlld1ZpZXcgYXMgV3hQcmV2aWV3LCBWSUVXX1RZUEVfV1hfUFJFVklFVyB9IGZyb20gJy4vdWkvdmlld3MvcHJldmlldy12aWV3JztcbmV4cG9ydCB7IFByZXZpZXdDb250cm9sbGVyIH0gZnJvbSAnLi91aS9jb250cm9sbGVycy9wcmV2aWV3LWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgUHJldmlld1Rvb2xiYXIgfSBmcm9tICcuL3VpL2NvbXBvbmVudHMvcHJldmlldy10b29sYmFyJztcbmV4cG9ydCB7IFByZXZpZXdDb250ZW50IH0gZnJvbSAnLi91aS9jb21wb25lbnRzL3ByZXZpZXctY29udGVudCc7XG5leHBvcnQgeyBQcmV2aWV3U3RhdHVzIH0gZnJvbSAnLi91aS9jb21wb25lbnRzL3ByZXZpZXctc3RhdHVzJztcblxuLy8g5Li65LqG5L+d5oyB5a6M5YWo55qE5ZCR5ZCO5YW85a655oCn77yM5o+Q5L6b5LiA5Liq5YyF6KOF57G7XG5pbXBvcnQgeyBXb3Jrc3BhY2VMZWFmLCBQbHVnaW4sIFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBQcmV2aWV3VmlldywgVklFV19UWVBFX1dYX1BSRVZJRVcgfSBmcm9tICcuL3VpL3ZpZXdzL3ByZXZpZXctdmlldyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQg6K+35L2/55So5paw55qE5qih5Z2X5YyW57uE5Lu277yaUHJldmlld1ZpZXcsIFByZXZpZXdDb250cm9sbGVyIOetiVxuICog5q2k57G75L+d55WZ5piv5Li65LqG5ZCR5ZCO5YW85a6577yM5L2G5bu66K6u6L+B56e75Yiw5paw5p625p6EXG4gKi9cbi8vIENsYXVkZSBDb2RlIFVwZGF0ZVxuZXhwb3J0IGNsYXNzIFd4UHJldmlld0xlZ2FjeSBleHRlbmRzIFByZXZpZXdWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBzdXBlcihsZWFmLCBwbHVnaW4pO1xuICAgIH1cblxuICAgIC8vIOS/neaMgeWOn+acieeahOWFrOWFsUFQSVxuICAgIGFzeW5jIGJhdGNoUG9zdChmb2xkZXI6IFRGb2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udHJvbGxlcigpLmJhdGNoUG9zdChmb2xkZXIpO1xuICAgIH1cblxuICAgIC8vIOWFtuS7luWOn+acieaWueazleeahOS7o+eQhi4uLlxuICAgIGdldCBjdXJyZW50QXBwSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbnRyb2xsZXIoKS5nZXRDdXJyZW50QXBwSWQoKTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudEZpbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbnRyb2xsZXIoKS5nZXRDdXJyZW50RmlsZSgpO1xuICAgIH1cblxuICAgIGdldCBzZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udHJvbGxlcigpLmdldFNldHRpbmdzKCk7XG4gICAgfVxuXG4gICAgZ2V0IGFzc2V0c01hbmFnZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbnRyb2xsZXIoKS5nZXRBc3NldHNNYW5hZ2VyKCk7XG4gICAgfVxufVxuXG4vLyDpu5jorqTlr7zlh7rmlrDnmoRQcmV2aWV3Vmlld1xuZXhwb3J0IGRlZmF1bHQgUHJldmlld1ZpZXc7Il19