/*
 * Copyright (c) 2024-2025 IsHexx
 * All rights reserved.
 *
 * This software is proprietary and confidential. No part of this software
 * may be reproduced, distributed, or transmitted in any form or by any means,
 * including photocopying, recording, or other electronic or mechanical methods,
 * without the prior written permission of the author, except in the case of
 * brief quotations embodied in critical reviews and certain other noncommercial
 * uses permitted by copyright law.
 *
 * For permission requests, contact: IsHexx
 */
import { sanitizeHTMLToDom, Platform } from "obsidian";
import * as postcss from "./postcss/postcss";
let PluginVersion = "0.0.0";
let PlugPlatform = "obsidian";
export function setVersion(version) {
    PluginVersion = version;
    if (Platform.isWin) {
        PlugPlatform = "win";
    }
    else if (Platform.isMacOS) {
        PlugPlatform = "mac";
    }
    else if (Platform.isLinux) {
        PlugPlatform = "linux";
    }
    else if (Platform.isIosApp) {
        PlugPlatform = "ios";
    }
    else if (Platform.isAndroidApp) {
        PlugPlatform = "android";
    }
}
// Claude Code Update
function getStyleSheet() {
    for (let i = 0; i < document.styleSheets.length; i++) {
        const sheet = document.styleSheets[i];
        if (sheet.title == 'wdwxedit-style') {
            return sheet;
        }
    }
}
function applyStyles(element, styles, computedStyle) {
    for (let i = 0; i < styles.length; i++) {
        const propertyName = styles[i];
        let propertyValue = computedStyle.getPropertyValue(propertyName);
        if (propertyName == 'width' && styles.getPropertyValue(propertyName) == 'fit-content') {
            propertyValue = 'fit-content';
        }
        if (propertyName.indexOf('margin') >= 0 && styles.getPropertyValue(propertyName).indexOf('auto') >= 0) {
            propertyValue = styles.getPropertyValue(propertyName);
        }
        element.style.setProperty(propertyName, propertyValue);
    }
}
function parseAndApplyStyles(element, sheet) {
    try {
        const computedStyle = getComputedStyle(element);
        for (let i = 0; i < sheet.cssRules.length; i++) {
            const rule = sheet.cssRules[i];
            if (rule instanceof CSSStyleRule && element.matches(rule.selectorText)) {
                applyStyles(element, rule.style, computedStyle);
            }
        }
        // Claude Code Update
    }
    catch (e) {
        // 移除 console.warn 避免污染开发者控制台
    }
}
function traverse(root, sheet) {
    let element = root.firstElementChild;
    while (element) {
        if (element.tagName === 'svg') {
            // pass
        }
        else {
            traverse(element, sheet);
        }
        element = element.nextElementSibling;
    }
    parseAndApplyStyles(root, sheet);
}
export async function CSSProcess(content) {
    // 获取样式表
    const style = getStyleSheet();
    if (style) {
        traverse(content, style);
    }
}
export function parseCSS(css) {
    return postcss.parse(css);
}
export function ruleToStyle(rule) {
    let style = '';
    rule.walkDecls(decl => {
        style += decl.prop + ':' + decl.value + ';';
    });
    return style;
}
function processPseudoSelector(selector) {
    if (selector.includes('::before') || selector.includes('::after')) {
        selector = selector.replace(/::before/g, '').replace(/::after/g, '');
    }
    return selector;
}
function getPseudoType(selector) {
    if (selector.includes('::before')) {
        return 'before';
    }
    else if (selector.includes('::after')) {
        return 'after';
    }
    return undefined;
}
function applyStyle(root, cssRoot) {
    if (root.tagName.toLowerCase() === 'a' && root.classList.contains('wx_topic_link')) {
        return;
    }
    const cssText = root.style.cssText;
    cssRoot.walkRules(rule => {
        const selector = processPseudoSelector(rule.selector);
        try {
            if (root.matches(selector)) {
                let item = root;
                const pseudoType = getPseudoType(rule.selector);
                if (pseudoType) {
                    let content = '';
                    rule.walkDecls('content', decl => {
                        content = decl.value || '';
                    });
                    item = createSpan();
                    item.textContent = content.replace(/(^")|("$)/g, '');
                    if (pseudoType === 'before') {
                        root.prepend(item);
                    }
                    else if (pseudoType === 'after') {
                        root.appendChild(item);
                    }
                }
                rule.walkDecls(decl => {
                    // 如果已经设置了，则不覆盖
                    const setted = cssText.includes(decl.prop);
                    if (!setted || decl.important) {
                        item.style.setProperty(decl.prop, decl.value);
                    }
                });
            }
        }
        catch (err) {
            if (err.message && err.message.includes('is not a valid selector')) {
                return;
            }
            else {
                throw err;
            }
        }
    });
    if (root.tagName === 'svg') {
        return;
    }
    let element = root.firstElementChild;
    while (element) {
        applyStyle(element, cssRoot);
        element = element.nextElementSibling;
    }
}
// Claude Code Update: 保留outerHTML读取操作（用于最终HTML序列化输出到剪贴板）
export function applyCSS(html, css) {
    const doc = sanitizeHTMLToDom(html);
    const root = doc.firstChild;
    const cssRoot = postcss.parse(css);
    applyStyle(root, cssRoot);
    return root.outerHTML;
}
// Claude Code Update
// 禁用外部统计上报，避免API依赖
export function uevent(name) {
    // 本地统计，不发送到外部服务
    // 移除 console.log 避免污染开发者控制台
    // 原来的外部API调用已禁用
}
/**
 * 创建一个防抖函数
 * @param func 要执行的函数
 * @param wait 等待时间（毫秒）
 * @returns 防抖处理后的函数
 */
export function debounce(func, wait) {
    let timeout = null;
    return function (...args) {
        const context = this;
        const later = () => {
            timeout = null;
            func.apply(context, args);
        };
        if (timeout !== null) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(later, wait);
    };
}
export function cleanUrl(href) {
    try {
        href = encodeURI(href).replace(/%25/g, '%');
    }
    catch (e) {
        return null;
    }
    return href;
}
export async function waitForLayoutReady(app) {
    if (app.workspace.layoutReady) {
        return;
    }
    return new Promise((resolve) => {
        app.workspace.onLayoutReady(() => resolve());
    });
}
//# sourceMappingURL=data:application/json;base64,