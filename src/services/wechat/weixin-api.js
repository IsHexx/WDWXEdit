/*
 * Copyright (c) 2024-2025 IsHexx
 * All rights reserved.
 *
 * This software is proprietary and confidential. No part of this software
 * may be reproduced, distributed, or transmitted in any form or by any means,
 * including photocopying, recording, or other electronic or mechanical methods,
 * without the prior written permission of the author, except in the case of
 * brief quotations embodied in critical reviews and certain other noncommercial
 * uses permitted by copyright law.
 *
 * For permission requests, contact: IsHexx
 */
import { requestUrl, getBlobArrayBuffer } from "obsidian";
// 全部使用本地后端服务，不再依赖外部API
const LocalBackendHost = 'http://127.0.0.1:8000';
// 获取认证头部
function getAuthHeaders() {
    return {
        'X-API-Key': 'wdwxedit-api-key-2024',
        'Content-Type': 'application/json',
    };
}
// 通过后端代理获取微信Token
export async function wxGetToken(authkey, appid, secret) {
    const url = `${LocalBackendHost}/api/v1/wechat/access-token`;
    try {
        const requestBody = {
            app_id: appid,
            app_secret: secret
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            const data = resData.data;
            return {
                json: {
                    token: data.access_token || '',
                    expires_in: data.expires_in || 7200
                },
                status: 200
            };
        }
        else {
            // 解析微信API错误码
            const errorMsg = resData.error || '获取Token失败';
            let code = 0;
            let message = errorMsg;
            if (errorMsg.includes('40125') || errorMsg.includes('AppSecret')) {
                code = 40125;
                message = 'AppSecret错误';
            }
            else if (errorMsg.includes('40164') || errorMsg.includes('IP')) {
                code = 40164;
                message = 'IP地址不在白名单中';
            }
            else if (errorMsg.includes('50002')) {
                code = 50002;
                message = '用户受限';
            }
            return {
                json: {
                    code,
                    message,
                    token: ''
                },
                status: 400
            };
        }
    }
    catch (error) {
        console.error('获取微信Token失败:', error);
        return {
            json: {
                code: 1,
                message: `获取Token失败: ${error}`,
                token: ''
            },
            status: 500
        };
    }
}
// 通过后端代理加密保存公众号信息
export async function wxEncrypt(authkey, wechat) {
    const url = `${LocalBackendHost}/api/v1/wechat/save-accounts`;
    try {
        const requestBody = {
            authkey,
            wechat
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            return {
                json: resData.data,
                status: 200
            };
        }
        else {
            return {
                json: {
                    message: resData.error || '保存失败'
                },
                status: 400
            };
        }
    }
    catch (error) {
        console.error('保存公众号信息失败:', error);
        return {
            json: {
                message: `保存失败: ${error}`
            },
            status: 500
        };
    }
}
// Claude Code Remove: 移除wxKeyInfo函数，不再需要注册码验证
// 通过后端代理上传图片
export async function wxUploadImage(data, filename, token, type) {
    const url = `${LocalBackendHost}/api/v1/wechat/upload-image`;
    try {
        // 将Blob转为base64
        const arrayBuffer = await getBlobArrayBuffer(data);
        const base64String = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
        const requestBody = {
            image_data: base64String,
            filename: filename,
            access_token: token,
            type: type || null
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            const data = resData.data;
            return {
                url: data.url || '',
                media_id: data.media_id || '',
                errcode: data.errcode || 0,
                errmsg: data.errmsg || '',
            };
        }
        else {
            return {
                url: '',
                media_id: '',
                errcode: 1,
                errmsg: resData.error || '上传失败',
            };
        }
    }
    catch (error) {
        console.error('上传图片失败:', error);
        return {
            url: '',
            media_id: '',
            errcode: 1,
            errmsg: `上传失败: ${error}`,
        };
    }
}
// 通过后端代理创建草稿
export async function wxAddDraft(token, data) {
    const url = `${LocalBackendHost}/api/v1/wechat/create-draft`;
    try {
        const articleData = {
            title: data.title,
            content: data.content,
            digest: data.digest || (data.title ? data.title.substring(0, 100) : ''),
            thumb_media_id: data.thumb_media_id || '',
            show_cover_pic: 1,
            author: data.author || '',
            content_source_url: data.content_source_url || '',
            need_open_comment: data.need_open_comment,
            only_fans_can_comment: data.only_fans_can_comment,
            pic_crop_235_1: data.pic_crop_235_1 || '',
            pic_crop_1_1: data.pic_crop_1_1 || ''
        };
        const requestBody = {
            articles: [articleData],
            access_token: token
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            return {
                json: resData.data,
                status: 200
            };
        }
        else {
            return {
                json: {
                    errcode: 1,
                    errmsg: resData.error || '创建草稿失败'
                },
                status: 400
            };
        }
    }
    catch (error) {
        console.error('创建草稿失败:', error);
        return {
            json: {
                errcode: 1,
                errmsg: `创建草稿失败: ${error}`
            },
            status: 500
        };
    }
}
// 通过后端代理创建图文草稿
export async function wxAddDraftImages(token, data) {
    const url = `${LocalBackendHost}/api/v1/wechat/create-draft`;
    try {
        const articleData = {
            title: data.title,
            content: data.content,
            digest: data.title.substring(0, 100),
            article_type: data.article_type,
            thumb_media_id: '',
            show_cover_pic: 0,
            author: '',
            content_source_url: '',
            need_open_comment: data.need_open_commnet,
            only_fans_can_comment: data.only_fans_can_comment,
            image_info: data.image_info
        };
        const requestBody = {
            articles: [articleData],
            access_token: token
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            return {
                json: resData.data,
                status: 200
            };
        }
        else {
            return {
                json: {
                    errcode: 1,
                    errmsg: resData.error || '创建图文草稿失败'
                },
                status: 400
            };
        }
    }
    catch (error) {
        console.error('创建图文草稿失败:', error);
        return {
            json: {
                errcode: 1,
                errmsg: `创建图文草稿失败: ${error}`
            },
            status: 500
        };
    }
}
// 通过后端代理获取素材列表
export async function wxBatchGetMaterial(token, type, offset = 0, count = 10) {
    const url = `${LocalBackendHost}/api/v1/wechat/batch-get-material`;
    try {
        const requestBody = {
            type,
            offset,
            count,
            access_token: token
        };
        const res = await requestUrl({
            url,
            method: 'POST',
            throw: false,
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });
        const resData = res.json;
        if (resData.success) {
            return resData.data;
        }
        else {
            return {
                errcode: 1,
                errmsg: resData.error || '获取素材列表失败',
                item: [],
                total_count: 0,
                item_count: 0
            };
        }
    }
    catch (error) {
        console.error('获取素材列表失败:', error);
        return {
            errcode: 1,
            errmsg: `获取素材列表失败: ${error}`,
            item: [],
            total_count: 0,
            item_count: 0
        };
    }
}
//# sourceMappingURL=data:application/json;base64,