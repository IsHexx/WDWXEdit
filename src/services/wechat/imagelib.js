/*
 * Copyright (c) 2024-2025 IsHexx
 * All rights reserved.
 *
 * This software is proprietary and confidential. No part of this software
 * may be reproduced, distributed, or transmitted in any form or by any means,
 * including photocopying, recording, or other electronic or mechanical methods,
 * without the prior written permission of the author, except in the case of
 * brief quotations embodied in critical reviews and certain other noncommercial
 * uses permitted by copyright law.
 *
 * For permission requests, contact: IsHexx
 */
// ‰ΩøÁî®Êñ∞ÁöÑAPIÂÆ¢Êà∑Á´Ø
// Êõ¥Êñ∞importË∑ØÂæÑ
import { wxUploadImage } from "../api";
import { WxSettings } from "../../core/settings";
import { IsWasmReady, LoadWasm } from "../../shared/wasm/wasm";
import AssetsManager from "../../core/assets";
export function IsImageLibReady() {
    return IsWasmReady();
}
export async function PrepareImageLib() {
    await LoadWasm();
}
export function WebpToJPG(data) {
    return GoWebpToJPG(new Uint8Array(data));
}
export function WebpToPNG(data) {
    return GoWebpToPNG(new Uint8Array(data));
}
export function AddWatermark(img, watermark) {
    return GoAddWatermark(new Uint8Array(img), new Uint8Array(watermark));
}
export async function UploadImageToWx(data, filename, token, type) {
    if (!IsImageLibReady()) {
        await PrepareImageLib();
    }
    const watermark = WxSettings.getInstance().watermark;
    if (watermark != null && watermark != '') {
        const watermarkData = await AssetsManager.getInstance().readFileBinary(watermark);
        if (watermarkData == null) {
            throw new Error('Ê∞¥Âç∞ÂõæÁâá‰∏çÂ≠òÂú®: ' + watermark);
        }
        const watermarkImg = AddWatermark(await data.arrayBuffer(), watermarkData);
        data = new Blob([watermarkImg], { type: data.type });
    }
    // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
    console.log('üîç ÂºÄÂßã‰∏ä‰º†ÂõæÁâá:', {
        filename,
        fileSize: data.size,
        fileType: data.type,
        tokenPreview: token ? `${token.substring(0, 20)}...` : 'null',
        type
    });
    const result = await wxUploadImage(data, filename, token, type);
    // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
    console.log('üìä ÂõæÁâá‰∏ä‰º†ÁªìÊûú:', {
        filename,
        errcode: result.errcode,
        errmsg: result.errmsg,
        hasUrl: !!result.url,
        hasMediaId: !!result.media_id,
        result: result
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VsaWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZWxpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFHSCxhQUFhO0FBQ2IsYUFBYTtBQUNiLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBUSxhQUFhLE1BQU0sbUJBQW1CLENBQUM7QUFNL0MsTUFBTSxVQUFVLGVBQWU7SUFDN0IsT0FBTyxXQUFXLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlO0lBQ25DLE1BQU0sUUFBUSxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBaUI7SUFDekMsT0FBTyxXQUFXLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFpQjtJQUN6QyxPQUFPLFdBQVcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQWdCLEVBQUUsU0FBc0I7SUFDbkUsT0FBTyxjQUFjLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsSUFBVSxFQUFFLFFBQWdCLEVBQUUsS0FBYSxFQUFFLElBQWE7SUFDOUYsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQ3RCLE1BQU0sZUFBZSxFQUFFLENBQUM7S0FDekI7SUFFRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQ3JELElBQUksU0FBUyxJQUFJLElBQUksSUFBSSxTQUFTLElBQUksRUFBRSxFQUFFO1FBQ3hDLE1BQU0sYUFBYSxHQUFHLE1BQU0sYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRixJQUFJLGFBQWEsSUFBSSxJQUFJLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLENBQUM7U0FDMUM7UUFDRCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDM0UsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxTQUFTO0lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7UUFDeEIsUUFBUTtRQUNSLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTtRQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDbkIsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNO1FBQzdELElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVoRSxTQUFTO0lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7UUFDeEIsUUFBUTtRQUNSLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztRQUN2QixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07UUFDckIsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRztRQUNwQixVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQzdCLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjQtMjAyNSBJc0hleHhcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBpcyBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLiBObyBwYXJ0IG9mIHRoaXMgc29mdHdhcmVcbiAqIG1heSBiZSByZXByb2R1Y2VkLCBkaXN0cmlidXRlZCwgb3IgdHJhbnNtaXR0ZWQgaW4gYW55IGZvcm0gb3IgYnkgYW55IG1lYW5zLFxuICogaW5jbHVkaW5nIHBob3RvY29weWluZywgcmVjb3JkaW5nLCBvciBvdGhlciBlbGVjdHJvbmljIG9yIG1lY2hhbmljYWwgbWV0aG9kcyxcbiAqIHdpdGhvdXQgdGhlIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBvZiB0aGUgYXV0aG9yLCBleGNlcHQgaW4gdGhlIGNhc2Ugb2ZcbiAqIGJyaWVmIHF1b3RhdGlvbnMgZW1ib2RpZWQgaW4gY3JpdGljYWwgcmV2aWV3cyBhbmQgY2VydGFpbiBvdGhlciBub25jb21tZXJjaWFsXG4gKiB1c2VzIHBlcm1pdHRlZCBieSBjb3B5cmlnaHQgbGF3LlxuICpcbiAqIEZvciBwZXJtaXNzaW9uIHJlcXVlc3RzLCBjb250YWN0OiBJc0hleHhcbiAqL1xuXG5pbXBvcnQgeyBnZXRCbG9iQXJyYXlCdWZmZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcbi8vIOS9v+eUqOaWsOeahEFQSeWuouaIt+err1xuLy8g5pu05pawaW1wb3J06Lev5b6EXG5pbXBvcnQgeyB3eFVwbG9hZEltYWdlIH0gZnJvbSBcIi4uL2FwaVwiO1xuaW1wb3J0IHsgV3hTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9jb3JlL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBJc1dhc21SZWFkeSwgTG9hZFdhc20gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3dhc20vd2FzbVwiO1xuaW1wb3J0ICBBc3NldHNNYW5hZ2VyIGZyb20gXCIuLi8uLi9jb3JlL2Fzc2V0c1wiO1xuXG5kZWNsYXJlIGZ1bmN0aW9uIEdvV2VicFRvSlBHKGRhdGE6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5O1xuZGVjbGFyZSBmdW5jdGlvbiBHb1dlYnBUb1BORyhkYXRhOiBVaW50OEFycmF5KTogVWludDhBcnJheTtcbmRlY2xhcmUgZnVuY3Rpb24gR29BZGRXYXRlcm1hcmsoaW1nOiBVaW50OEFycmF5LCB3YXRlcm1hcms6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gSXNJbWFnZUxpYlJlYWR5KCkge1xuICByZXR1cm4gSXNXYXNtUmVhZHkoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFByZXBhcmVJbWFnZUxpYigpIHtcbiAgYXdhaXQgTG9hZFdhc20oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFdlYnBUb0pQRyhkYXRhOiBBcnJheUJ1ZmZlcik6IEFycmF5QnVmZmVyIHtcbiAgcmV0dXJuIEdvV2VicFRvSlBHKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFdlYnBUb1BORyhkYXRhOiBBcnJheUJ1ZmZlcik6IEFycmF5QnVmZmVyIHtcbiAgcmV0dXJuIEdvV2VicFRvUE5HKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFkZFdhdGVybWFyayhpbWc6IEFycmF5QnVmZmVyLCB3YXRlcm1hcms6IEFycmF5QnVmZmVyKTogQXJyYXlCdWZmZXIge1xuICByZXR1cm4gR29BZGRXYXRlcm1hcmsobmV3IFVpbnQ4QXJyYXkoaW1nKSwgbmV3IFVpbnQ4QXJyYXkod2F0ZXJtYXJrKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBVcGxvYWRJbWFnZVRvV3goZGF0YTogQmxvYiwgZmlsZW5hbWU6IHN0cmluZywgdG9rZW46IHN0cmluZywgdHlwZT86IHN0cmluZykge1xuICBpZiAoIUlzSW1hZ2VMaWJSZWFkeSgpKSB7XG4gICAgYXdhaXQgUHJlcGFyZUltYWdlTGliKCk7IFxuICB9XG4gIFxuICBjb25zdCB3YXRlcm1hcmsgPSBXeFNldHRpbmdzLmdldEluc3RhbmNlKCkud2F0ZXJtYXJrO1xuICBpZiAod2F0ZXJtYXJrICE9IG51bGwgJiYgd2F0ZXJtYXJrICE9ICcnKSB7XG4gICAgY29uc3Qgd2F0ZXJtYXJrRGF0YSA9IGF3YWl0IEFzc2V0c01hbmFnZXIuZ2V0SW5zdGFuY2UoKS5yZWFkRmlsZUJpbmFyeSh3YXRlcm1hcmspO1xuICAgIGlmICh3YXRlcm1hcmtEYXRhID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign5rC05Y2w5Zu+54mH5LiN5a2Y5ZyoOiAnICsgd2F0ZXJtYXJrKTtcbiAgICB9XG4gICAgY29uc3Qgd2F0ZXJtYXJrSW1nID0gQWRkV2F0ZXJtYXJrKGF3YWl0IGRhdGEuYXJyYXlCdWZmZXIoKSwgd2F0ZXJtYXJrRGF0YSk7XG4gICAgZGF0YSA9IG5ldyBCbG9iKFt3YXRlcm1hcmtJbWddLCB7IHR5cGU6IGRhdGEudHlwZSB9KTtcbiAgfVxuICBcbiAgLy8g5re75Yqg6LCD6K+V5L+h5oGvXG4gIGNvbnNvbGUubG9nKCfwn5SNIOW8gOWni+S4iuS8oOWbvueJhzonLCB7XG4gICAgZmlsZW5hbWUsXG4gICAgZmlsZVNpemU6IGRhdGEuc2l6ZSxcbiAgICBmaWxlVHlwZTogZGF0YS50eXBlLFxuICAgIHRva2VuUHJldmlldzogdG9rZW4gPyBgJHt0b2tlbi5zdWJzdHJpbmcoMCwgMjApfS4uLmAgOiAnbnVsbCcsXG4gICAgdHlwZVxuICB9KTtcbiAgXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHd4VXBsb2FkSW1hZ2UoZGF0YSwgZmlsZW5hbWUsIHRva2VuLCB0eXBlKTtcbiAgXG4gIC8vIOa3u+WKoOiwg+ivleS/oeaBr1xuICBjb25zb2xlLmxvZygn8J+TiiDlm77niYfkuIrkvKDnu5Pmnpw6Jywge1xuICAgIGZpbGVuYW1lLFxuICAgIGVycmNvZGU6IHJlc3VsdC5lcnJjb2RlLFxuICAgIGVycm1zZzogcmVzdWx0LmVycm1zZyxcbiAgICBoYXNVcmw6ICEhcmVzdWx0LnVybCxcbiAgICBoYXNNZWRpYUlkOiAhIXJlc3VsdC5tZWRpYV9pZCxcbiAgICByZXN1bHQ6IHJlc3VsdFxuICB9KTtcbiAgXG4gIHJldHVybiByZXN1bHQ7XG59Il19