// Claude Code Update
/**
 * 微信API客户端模块
 * 提供微信公众号相关的所有API功能
 */
import { BACKEND_CONFIG } from './backend-config';
/**
 * 微信客户端类
 * 封装所有微信公众号API操作
 */
export class WechatClient {
    constructor(httpClient) {
        this.httpClient = httpClient;
        if (BACKEND_CONFIG.DEBUG) {
            console.log('微信API客户端初始化完成');
        }
    }
    // === 认证相关方法 ===
    /**
     * 获取访问令牌
     */
    async authenticate(auth) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log('🔐 正在获取微信访问令牌...');
        }
        // 添加调试信息
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 API请求参数:', {
                app_id: auth.appId,
                app_secret: `${auth.appSecret.substring(0, 8)}...${auth.appSecret.substring(auth.appSecret.length - 4)}`,
                app_secret_length: auth.appSecret.length
            });
        }
        const response = await this.httpClient.post('/api/v1/wechat/access-token', {
            app_id: auth.appId,
            app_secret: auth.appSecret
        });
        if (!response.success) {
            throw new Error(`获取访问令牌失败: ${response.error}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 微信访问令牌获取成功');
        }
        return response.data;
    }
    // === 媒体管理方法 ===
    /**
     * 上传媒体文件
     */
    async uploadMedia(upload) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`📤 正在上传媒体文件: ${upload.filename}`);
        }
        const requestData = {
            image_data: upload.mediaData,
            filename: upload.filename,
            access_token: upload.accessToken,
            type: upload.storageType === 'permanent' ? 'image' : undefined
        };
        const response = await this.httpClient.post('/api/v1/wechat/upload-image', requestData);
        if (!response.success) {
            console.error('❌ 媒体上传失败:', response.error);
            throw new Error(`媒体上传失败: ${response.error}`);
        }
        const result = response.data;
        if (result.errcode !== 0) {
            console.error('❌ 微信API返回错误:', result.errmsg);
            throw new Error(`微信API错误: ${result.errmsg}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 媒体上传成功, media_id:', result.media_id);
        }
        return result;
    }
    /**
     * 获取媒体列表
     */
    async getMediaList(params) {
        var _a;
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`📋 正在获取媒体列表: ${params.type}`);
        }
        // 修复API路径，使用正确的后端路由
        const response = await this.httpClient.post('/api/v1/wechat/batch-get-material', {
            type: params.type,
            offset: params.offset,
            count: params.count,
            access_token: params.accessToken
        });
        if (!response.success) {
            throw new Error(`获取媒体列表失败: ${response.error}`);
        }
        const result = response.data;
        // 修复错误判断逻辑，微信API成功响应可能没有errcode字段
        if (BACKEND_CONFIG.DEBUG) {
            console.log('🔍 素材库原始响应数据:', result);
        }
        // 只有当明确存在errcode且不为0时才认为是错误
        if (result.errcode !== undefined && result.errcode !== 0) {
            throw new Error(`微信API错误: ${result.errmsg || '未知错误'}`);
        }
        // 检查是否有实际的素材数据
        if (result.total_count === undefined) {
            throw new Error('微信API响应格式异常：缺少total_count字段');
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 媒体列表获取成功，总数:', result.total_count);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 项目数量:', result.item_count);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 实际项目:', ((_a = result.item) === null || _a === void 0 ? void 0 : _a.length) || 0);
        }
        return result;
    }
    // === 草稿管理方法 ===
    /**
     * 创建草稿
     */
    async createDraft(draft, accessToken) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`📝 正在创建草稿: ${draft.length} 篇文章`);
        }
        const response = await this.httpClient.post('/api/v1/wechat/create-draft', {
            articles: draft,
            access_token: accessToken
        });
        if (!response.success) {
            console.error('❌ 草稿创建失败:', response.error);
            throw new Error(`草稿创建失败: ${response.error}`);
        }
        const result = response.data;
        if (result.errcode !== 0) {
            console.error('❌ 微信API返回错误:', result.errmsg);
            throw new Error(`微信API错误: ${result.errmsg}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 草稿创建成功, media_id:', result.media_id);
        }
        return result;
    }
    /**
     * 更新草稿
     */
    async updateDraft(draftId, index, article, accessToken) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`📝 正在更新草稿: ${draftId}[${index}]`);
        }
        const response = await this.httpClient.put('/api/v1/wechat/update-draft', {
            media_id: draftId,
            index,
            article,
            access_token: accessToken
        });
        if (!response.success) {
            throw new Error(`草稿更新失败: ${response.error}`);
        }
        const result = response.data;
        if (result.errcode !== 0) {
            throw new Error(`微信API错误: ${result.errmsg}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 草稿更新成功');
        }
        return result;
    }
    /**
     * 删除草稿
     */
    async deleteDraft(draftId, index, accessToken) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`🗑️ 正在删除草稿: ${draftId}[${index}]`);
        }
        const response = await this.httpClient.delete('/api/v1/wechat/delete-draft', {
            media_id: draftId,
            index,
            access_token: accessToken
        });
        if (!response.success) {
            throw new Error(`草稿删除失败: ${response.error}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 草稿删除成功');
        }
        return response;
    }
    /**
     * 获取草稿列表
     */
    async getDraftList(accessToken, offset = 0, count = 20) {
        var _a;
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 正在获取草稿列表...');
        }
        const response = await this.httpClient.get('/api/v1/wechat/drafts', {
            access_token: accessToken,
            offset,
            count
        });
        if (!response.success) {
            throw new Error(`获取草稿列表失败: ${response.error}`);
        }
        const result = response.data;
        // 修复错误判断逻辑，微信API成功响应可能没有errcode字段
        if (BACKEND_CONFIG.DEBUG) {
            console.log('🔍 草稿列表原始响应数据:', result);
        }
        // 只有当明确存在errcode且不为0时才认为是错误
        if (result.errcode !== undefined && result.errcode !== 0) {
            throw new Error(`微信API错误: ${result.errmsg || '未知错误'}`);
        }
        // 检查是否有实际的草稿数据
        if (result.total_count === undefined) {
            throw new Error('微信API响应格式异常：缺少total_count字段');
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 草稿列表获取成功，总数:', result.total_count);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 草稿项目数量:', result.item_count);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📋 实际草稿:', ((_a = result.item) === null || _a === void 0 ? void 0 : _a.length) || 0);
        }
        return result;
    }
    // === 发布管理方法 ===
    /**
     * 发布内容
     */
    async publishContent(draftId, accessToken) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`🚀 正在发布内容: ${draftId}`);
        }
        const response = await this.httpClient.post('/api/v1/wechat/publish-draft', {
            media_id: draftId,
            access_token: accessToken
        });
        if (!response.success) {
            console.error('❌ 内容发布失败:', response.error);
            throw new Error(`内容发布失败: ${response.error}`);
        }
        const result = response.data;
        if (result.errcode !== 0) {
            console.error('❌ 微信API返回错误:', result.errmsg);
            throw new Error(`微信API错误: ${result.errmsg}`);
        }
        console.log('✅ 内容发布成功, publish_id:', result.publish_id);
        return result;
    }
    /**
     * 获取发布状态
     */
    async getPublishStatus(publishId, accessToken) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log(`📊 正在查询发布状态: ${publishId}`);
        }
        const response = await this.httpClient.post('/api/v1/wechat/publish-status', {
            publish_id: publishId,
            access_token: accessToken
        });
        if (!response.success) {
            throw new Error(`获取发布状态失败: ${response.error}`);
        }
        const result = response.data;
        if (result.errcode !== 0) {
            throw new Error(`微信API错误: ${result.errmsg}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 发布状态获取成功');
        }
        return result;
    }
    // === 辅助方法 ===
    /**
     * 健康检查
     */
    async healthCheck() {
        try {
            const response = await this.httpClient.get('/api/v1/wechat/health');
            return response.success;
        }
        catch (_a) {
            return false;
        }
    }
    // Claude Code ADD: 新增账户管理方法
    /**
     * 验证AuthKey是否有效
     */
    async verifyAuthKey(authKey) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log('🔑 验证AuthKey...');
        }
        const response = await this.httpClient.post('/api/v1/wechat/verify-auth-key', {
            auth_key: authKey
        });
        if (!response.success || !response.data) {
            throw new Error(`验证AuthKey失败: ${response.error || '未知错误'}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ AuthKey验证完成:', response.data);
        }
        return response.data;
    }
    /**
     * 注册或更新公众号账户
     */
    async registerAccount(request) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log('📝 注册公众号账户:', request.app_id);
        }
        const response = await this.httpClient.post('/api/v1/wechat/register-account', {
            app_id: request.app_id,
            app_secret: request.app_secret,
            name: request.name,
            auth_key: request.auth_key
        });
        if (!response.success) {
            throw new Error(`注册公众号失败: ${response.error}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 公众号账户注册成功');
        }
        return response;
    }
    /**
     * 检查公众号权限
     */
    async checkPermission(appId) {
        if (BACKEND_CONFIG.DEBUG) {
            console.log('🔍 检查公众号权限:', appId);
        }
        const response = await this.httpClient.get('/api/v1/wechat/check-permission', {
            app_id: appId
        });
        if (!response.success || !response.data) {
            throw new Error(`检查权限失败: ${response.error}`);
        }
        if (BACKEND_CONFIG.DEBUG) {
            console.log('✅ 权限检查完成:', response.data);
        }
        return response.data;
    }
}
// === 兼容性函数（向后兼容） ===
/**
 * 获取微信Token（兼容性函数）
 */
export async function wxGetToken(appid, secret) {
    // 这个函数需要全局的微信客户端实例，将在index.ts中实现
    throw new Error('请使用 getWechatClient().authenticate() 替代');
}
/**
 * 上传图片到微信（兼容性函数）
 */
export async function wxUploadImage(data, filename, token, type) {
    // 这个函数需要全局的微信客户端实例，将在index.ts中实现
    throw new Error('请使用 getWechatClient().uploadMedia() 替代');
}
/**
 * 添加草稿（兼容性函数）
 */
export async function wxAddDraft(articles, token) {
    // 这个函数需要全局的微信客户端实例，将在index.ts中实现
    throw new Error('请使用 getWechatClient().createDraft() 替代');
}
//# sourceMappingURL=data:application/json;base64,