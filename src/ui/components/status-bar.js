export class StatusBar {
    constructor(container) {
        this.currentMessage = null;
        this.autoHideTimer = null;
        this.container = container;
        this.init();
    }
    // Claude Code Update: ‰ΩøÁî®CSSÁ±ªËÄåÈùûÂÜÖËÅîÊ†∑Âºè
    init() {
        this.statusBar = this.container.createDiv({ cls: 'wdwx-status-bar hidden' });
    }
    // ÊòæÁ§∫Áä∂ÊÄÅÊ∂àÊÅØ
    showMessage(message) {
        this.currentMessage = {
            ...message,
            timestamp: message.timestamp || Date.now()
        };
        this.statusBar.empty();
        this.statusBar.removeClass('status-info', 'status-success', 'status-warning', 'status-error');
        this.statusBar.addClass(`status-${message.type}`);
        // ÂàõÂª∫Ê∂àÊÅØÂÜÖÂÆπ
        const messageContent = this.statusBar.createDiv({ cls: 'status-content' });
        // Claude Code Update: ‰ΩøÁî®textContentÊõø‰ª£innerHTMLËÆæÁΩÆÈùôÊÄÅÊñáÊú¨
        // ÂõæÊ†á
        const icon = messageContent.createSpan({ cls: 'status-icon' });
        icon.textContent = this.getIconForType(message.type);
        // Ê∂àÊÅØÊñáÊú¨
        const text = messageContent.createSpan({ cls: 'status-text' });
        text.textContent = message.message;
        // ÂÖ≥Èó≠ÊåâÈíÆ
        const closeBtn = messageContent.createSpan({ cls: 'status-close' });
        closeBtn.textContent = '√ó';
        closeBtn.onclick = () => this.hideMessage();
        this.statusBar.removeClass('hidden');
    }
    // ÊòæÁ§∫‰ø°ÊÅØÊ∂àÊÅØÔºà3ÁßíÂêéËá™Âä®Ê∂àÂ§±Ôºâ
    showInfo(message) {
        this.showTemporaryMessage({ type: 'info', message }, 3000);
    }
    // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØÔºà3ÁßíÂêéËá™Âä®Ê∂àÂ§±Ôºâ
    showSuccess(message) {
        this.showTemporaryMessage({ type: 'success', message }, 3000);
    }
    // ÊòæÁ§∫Ë≠¶ÂëäÊ∂àÊÅØÔºà5ÁßíÂêéËá™Âä®Ê∂àÂ§±Ôºâ
    showWarning(message) {
        this.showTemporaryMessage({ type: 'warning', message }, 5000);
    }
    // ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØÔºà‰∏çËá™Âä®Ê∂àÂ§±Ôºâ
    showError(message) {
        this.showMessage({ type: 'error', message });
    }
    // Claude Code Update: ‰øùÁïôËøõÂ∫¶Êù°ÂÆΩÂ∫¶ÁöÑÂÜÖËÅîÊ†∑ÂºèÔºàÂä®ÊÄÅËÆ°ÁÆóÂÄºÔºâ
    // ÊòæÁ§∫ËøõÂ∫¶Áä∂ÊÄÅÔºà‰∏çËá™Âä®Ê∂àÂ§±Ôºâ
    showProgress(message, progress) {
        this.showMessage({ type: 'info', message });
        if (typeof progress === 'number') {
            const progressBar = this.statusBar.createDiv({ cls: 'status-progress' });
            const progressFill = progressBar.createDiv({ cls: 'status-progress-fill' });
            // ËøõÂ∫¶Êù°ÂÆΩÂ∫¶ÈúÄË¶ÅÂä®ÊÄÅËÆ°ÁÆóÔºå‰øùÁïôÂÜÖËÅîÊ†∑Âºè
            progressFill.setAttr('style', `width: ${Math.min(100, Math.max(0, progress))}%`);
        }
    }
    // Êõ¥Êñ∞ËøõÂ∫¶
    updateProgress(progress) {
        const progressFill = this.statusBar.querySelector('.status-progress-fill');
        if (progressFill) {
            // ËøõÂ∫¶Êù°ÂÆΩÂ∫¶ÈúÄË¶ÅÂä®ÊÄÅËÆ°ÁÆóÔºå‰øùÁïôÂÜÖËÅîÊ†∑Âºè
            progressFill.setAttr('style', `width: ${Math.min(100, Math.max(0, progress))}%`);
        }
    }
    // Claude Code Update: ‰ΩøÁî®CSSÁ±ªËÄåÈùûÂÜÖËÅîÊ†∑Âºè
    // ÈöêËóèÊ∂àÊÅØ
    hideMessage() {
        this.statusBar.addClass('hidden');
        this.currentMessage = null;
        if (this.autoHideTimer) {
            clearTimeout(this.autoHideTimer);
            this.autoHideTimer = null;
        }
    }
    // Ëé∑ÂèñÂΩìÂâçÊ∂àÊÅØ
    getCurrentMessage() {
        return this.currentMessage;
    }
    // Ê∏ÖÈô§ÊâÄÊúâÊ∂àÊÅØ
    clear() {
        this.hideMessage();
        this.statusBar.empty();
    }
    getIconForType(type) {
        const icons = {
            info: 'üìò',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
        };
        return icons[type] || icons.info;
    }
    // ÊòæÁ§∫‰∏¥Êó∂Ê∂àÊÅØÔºàËá™Âä®ÈöêËóèÔºâ
    showTemporaryMessage(message, duration = 3000) {
        const messageWithTimestamp = {
            ...message,
            timestamp: message.timestamp || Date.now()
        };
        this.showMessage(messageWithTimestamp);
        // Ê∏ÖÈô§‰πãÂâçÁöÑÂÆöÊó∂Âô®
        if (this.autoHideTimer) {
            clearTimeout(this.autoHideTimer);
        }
        this.autoHideTimer = setTimeout(() => {
            if (this.currentMessage && this.currentMessage.timestamp === messageWithTimestamp.timestamp) {
                this.hideMessage();
            }
        }, duration);
    }
    // ÈîÄÊØÅÁªÑ‰ª∂
    destroy() {
        this.clear();
    }
}
//# sourceMappingURL=data:application/json;base64,